# PikU 프론트엔드 프로젝트 개발 규칙

이 문서는 PikU 프론트엔드 프로젝트의 일관된 개발을 위한 규칙과 가이드라인을 정의합니다.

## 1. 주요 기술 스택 및 버전

- **Next.js**: 15.3.3
- **React**: 19.0.0
- **TypeScript**: 5.x
- **Tailwind CSS**: 4.x
- **React Responsive**: 10.0.1

## 2. 아키텍처 규칙

### 서버 컴포넌트와 클라이언트 컴포넌트 분리

- **`page.tsx`는 서버 컴포넌트로 유지**: `app/**/page.tsx` 파일은 사용자가 처음으로 접근하는 페이지의 진입점이므로, 초기 로딩 성능 최적화를 위해 반드시 서버 컴포넌트로 유지하고 `'use client'` 지시어 사용을 지양합니다.
- **클라이언트 컴포넌트 분리**: `useState`, `useEffect` 등 클라이언트 사이드 훅이나 사용자 인터랙션 관련 로직이 필요한 경우, 반드시 별도의 클라이언트 컴포넌트(예: `components/MyComponent.tsx`)로 분리하여 관리합니다.
- **예시**: `app/signup/page.tsx`는 서버 컴포넌트로 두고, 실제 UI와 상태 관리는 `components/auth/SignupClient.tsx` 클라이언트 컴포넌트에서 처리하는 구조를 따릅니다.

### API 요청 분리

- **API 로직 중앙 관리**: 모든 외부 API 요청 로직은 반드시 `@/api` 디렉토리 내에서 관리합니다.
- **도메인 기반 파일 분리**: API 함수는 관련된 도메인(예: `auth`, `character`)을 기준으로 파일을 분리하여 작성합니다. (예: `api/auth.ts`, `api/character.ts`)
- **컴포넌트 내 직접 호출 지양**: 컴포넌트 내에서는 `axios`나 `fetch`와 같은 API 클라이언트를 직접 사용하지 않고, `@/api` 디렉토리에 정의된 함수를 임포트하여 사용합니다.

## 3. 스타일링 가이드

- **Tailwind CSS 우선 사용**: 모든 스타일링은 Tailwind CSS의 유틸리티 클래스를 사용하는 것을 원칙으로 합니다.
- **반응형 디자인**:
    - **스타일 변경**: `md:`, `lg:` 등 Tailwind의 반응형 접두사를 사용하여 CSS 속성을 변경합니다.
    - **컴포넌트 구조 변경**: 화면 크기에 따라 렌더링되는 컴포넌트의 구조나 로직 자체가 변경되어야 할 경우, `react-responsive` 라이브러리의 `useMediaQuery` 훅을 사용해 자바스크립트 레벨에서 조건부 렌더링을 구현합니다.

## 4. 코드 스타일

- **TypeScript**: 모든 컴포넌트와 로직에 타입스크립트를 적용하여 타입 안정성을 확보합니다. `any` 타입 사용은 지양하고, 불가피할 경우 명확한 사유를 주석으로 남깁니다.
- **컴포넌트 명명**: 컴포넌트 파일명과 함수명은 파스칼 케이스(PascalCase)를 따릅니다. (예: `MyComponent`)

## 5. 응답 규칙

- **언어**: 항상 한국어로 응답합니다. 